---
import type { GetStaticPaths } from "astro"
import BaseLayout from "@/layouts/BaseLayout.astro"
import { getCollection } from "astro:content"
import PostCard from "@/components/ui/PostCard.astro"
import paths from "@/config/paths"
import { Icon } from "astro-icon/components"
import { css } from "styled-system/css"
import { grid } from "styled-system/patterns"

export const getStaticPaths = (async () => {
  // number of pages to display
  const size = 10

  // choose collection to display
  const blogs = (await getCollection("blog"))
    .filter(v => v.data.publish)
    .sort(
      ({ data: { date: dateA } }, { data: { date: dateB } }) =>
        dateB.valueOf() - dateA.valueOf(),
    )
  const total = blogs.length

  // chunk entries into many pages
  const chunks = []
  for (let i = 0; i < total; i += size) {
    chunks.push(blogs.slice(i, Math.min(i + size, total)))
  }

  // provide information for each page
  return chunks.map((chunk, page) => ({
    params: {
      slug: page+1 == 1 ? undefined : String(page+1)
    },
    props: {
      entries: chunk,
      size,
      total,
    }
  }))
}) satisfies GetStaticPaths

// params, props
const page = Astro.params.slug
const { entries, size, total, } = Astro.props
const maxPage = Math.floor(total / size)
const pageNum = page ? Number(page) : 1

// head
const title = "Posts"
const description = `All posts`

// styles
const root__nav = grid({
  w: "full",
  maxW: "64",
  fontSize: "3xl",
  gridTemplateColumns: "1fr 1fr",
  justifyContent: "center",

  "& a": {
    display: "flex",
    alignItems: "center",
    gap: 2,
    p: 2,
  },
})
const root__next = css({
  gridColumnStart: 2
})
---

<BaseLayout {title} {description}>
  <main>
    <h2>All Posts</h2>
    <p>total {total} posts</p>

    <!-- display pages -->
    <section>
      <ol>
        {
          entries.map(({ id, data: { title, description, date }}) => (
            <li>
              <PostCard
                href={paths.blogDetail(id)}
                {title} {description} {date}
              />
            </li>
          ))
        }
      </ol>
    </section>

    <!-- pagination buttons -->
    <nav class={root__nav}>
      {1 < pageNum
        ? (
          <a href={paths.postPages(pageNum - 1)}>
            <Icon name="iconoir:arrow-left-circle" />
            Prev
          </a>
        )
        : null}
      {pageNum < maxPage
        ? (
          <a href={paths.postPages(pageNum + 1)} class={root__next}>
            Next
            <Icon name="iconoir:arrow-right-circle" />
          </a>
        )
        : null}
    </nav>
  </main>
</BaseLayout>
