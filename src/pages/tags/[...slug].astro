---
import type { GetStaticPaths } from "astro"
import { getCollection, type CollectionEntry } from "astro:content"
import BaseLayout from "@/layouts/BaseLayout.astro"
import PostCard from "@/components/ui/PostCard.astro"

type Bucket = {
  count: number
  entries: CollectionEntry<"all">[]
}

export const getStaticPaths = (async () => {
  const all = (await getCollection("all")).filter(v => v.data.publish)
  
  // A post can have multiple tags.
  const buckets = all.reduce((map, post) => {
    // Iterate tags of each post
    for (const tag of post.data.tags) {
      const find = map.get(tag)
      if (find) {
        find.count += 1
        find.entries.push(post)
      } else {
        map.set(tag, { count: 1, entries: [post] })
      }
    }
    return map
  }, new Map<string, Bucket>())
  
  return Array.from(buckets.entries()).map(([tag, bucket]) => ({
    params: { slug: tag },
    props: {
      count: bucket.count,
      entries: bucket.entries.sort(
        ({ data: { date: dateA } }, { data: { date: dateB } }) =>
          dateB.valueOf() - dateA.valueOf(),
      )
    }
  }))
}) satisfies GetStaticPaths

// params, props
const tag = Astro.params.slug
const { count, entries } = Astro.props

// head
const title = "Tags | Giban"
const description = `Posts with tag ${tag}`
const { href: url } = Astro.url

---
<BaseLayout {url} {title} {description}>
  <main>
    <h2>#{tag}</h2>
    <p>{count} posts</p>
    <ol>
      {
        entries.map((entry) => (
          <li>
            <PostCard
              href={"/" + entry.id}
              title={entry.data.title}
              description={entry.data.description}
              date={entry.data.date}
            />
          </li>
        ))
      }
    </ol>
  </main>
</BaseLayout>
