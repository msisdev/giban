---
import { Icon } from "astro-icon/components"
import { css } from "styled-system/css"

const root = css({
  color: "primary",
  cursor: "pointer",
})

---
<button id="theme-switch" class={root} type="button" aria-label="Toggle color mode">
  <!-- Icons are prepared statically. You should load both. -->
  <Icon id="theme-switch__sun" name="iconoir:sun-light" />
  <Icon id="theme-switch__moon" name="iconoir:half-moon" style="display:none" />
</button>

<script is:inline>
  const config = {
    storageKey:     "color-mode",
    attributeName:  "data-color-mode",
    button:         document.getElementById("theme-switch"),
    sun:            document.getElementById("theme-switch__sun"),
    moon:           document.getElementById("theme-switch__moon"),
  }

  // init state
  let current = getCurrentMode()
  updateIcon(current)

  // sync: current -> body attribute
  document.body.setAttribute(config.attributeName, current)

  // button listening click...
  config.button.addEventListener("click", () => {
    const next = current === "light"
      ? "dark"
      : "light"
    
    current = next                                          // update state
    updateIcon(next)                                        // update icon
    sessionStorage.setItem(config.storageKey, next)         // sync with session
    document.body.setAttribute(config.attributeName, next)  // sync with attribute
  })

  function getCurrentMode() {
    const fromStorage = (() => {
      const v = window.sessionStorage.getItem(config.storageKey)
      if (v === "light" || v === "dark") return v
      return null
    })()

    const fromPreference = window.matchMedia("(prefers-color-scheme: dark").matches
      ? "dark"
      : "light"
    
    return fromStorage ?? fromPreference
  }

  function updateIcon(mode) {
    // swap icon
    if (mode === "light") {
      config.sun.style.display = "block"
      config.moon.style.display = "none"
    } else {
      config.sun.style.display = "none"
      config.moon.style.display = "block"
    }
  }
</script>
